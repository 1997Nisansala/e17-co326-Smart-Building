[
    {
        "id": "d85ab886bb3338cf",
        "type": "tab",
        "label": "Web Interface",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "763d55c646760a59",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_smoke_detect",
        "operation": "find",
        "x": 340,
        "y": 160,
        "wires": [
            [
                "92a5d657508eeca5",
                "fe94df925cca471b"
            ]
        ]
    },
    {
        "id": "d63a9b13f021751d",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2701b1ecd02534d5",
        "order": 2,
        "width": 5,
        "height": 5,
        "label": "Smoke sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "92a5d657508eeca5",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 9",
        "func": "var floor=\"floor0\"\nvar room=\"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 100,
        "wires": [
            [
                "d63a9b13f021751d"
            ]
        ]
    },
    {
        "id": "3de3b30a3e1b8713",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_fire_alarm",
        "operation": "find",
        "x": 330,
        "y": 220,
        "wires": [
            [
                "cfaecc4e067bdc80"
            ]
        ]
    },
    {
        "id": "79fafe62ef50094a",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 220,
        "wires": [
            [
                "3de3b30a3e1b8713"
            ]
        ]
    },
    {
        "id": "cfaecc4e067bdc80",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 14",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 220,
        "wires": [
            [
                "84141e89b4345a3c"
            ]
        ]
    },
    {
        "id": "635b7a665cc0d9c4",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 280,
        "wires": [
            [
                "ce1c4b85a04b92fb"
            ]
        ]
    },
    {
        "id": "ce1c4b85a04b92fb",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_sprinkler",
        "operation": "find",
        "x": 320,
        "y": 280,
        "wires": [
            [
                "dd17f758067dead6"
            ]
        ]
    },
    {
        "id": "dd17f758067dead6",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 21",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "a8a1314e3a791a13"
            ]
        ]
    },
    {
        "id": "2048dc6732675eb0",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 160,
        "wires": [
            [
                "763d55c646760a59"
            ]
        ]
    },
    {
        "id": "e8e4f125754d5f85",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 340,
        "wires": [
            [
                "849cd9f05a789e19"
            ]
        ]
    },
    {
        "id": "849cd9f05a789e19",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 340,
        "wires": [
            [
                "448b8eb5e8e722c2"
            ]
        ]
    },
    {
        "id": "448b8eb5e8e722c2",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 29",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 340,
        "wires": [
            [
                "362a5cc2b421c745"
            ]
        ]
    },
    {
        "id": "362a5cc2b421c745",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2701b1ecd02534d5",
        "order": 1,
        "width": 5,
        "height": 5,
        "label": "Pressure sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "84141e89b4345a3c",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2701b1ecd02534d5",
        "order": 3,
        "width": 5,
        "height": 5,
        "label": "Fire Alarm History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a8a1314e3a791a13",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "2701b1ecd02534d5",
        "order": 4,
        "width": 5,
        "height": 5,
        "label": "Sprinkler History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "9a8ef51abfbf141b",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 00",
        "info": "",
        "x": 80,
        "y": 100,
        "wires": []
    },
    {
        "id": "9eb71a5ee18899cb",
        "type": "comment",
        "z": "d85ab886bb3338cf",
        "name": "Room 01",
        "info": "",
        "x": 80,
        "y": 420,
        "wires": []
    },
    {
        "id": "0cf24f8726756edb",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_smoke_detect",
        "operation": "find",
        "x": 340,
        "y": 460,
        "wires": [
            [
                "931d7c6803aa5dde"
            ]
        ]
    },
    {
        "id": "5eaf2bdf79e8347c",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "ccafe30d692f0847",
        "order": 2,
        "width": 5,
        "height": 5,
        "label": "Smoke sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "931d7c6803aa5dde",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 144",
        "func": "var floor=\"floor0\"\nvar room=\"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp=topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data=[]\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp=topicList[3]\n        var roomTemp=topicList[4]\n        if(floor==floorTemp && room==roomTemp){\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data=await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 460,
        "wires": [
            [
                "5eaf2bdf79e8347c"
            ]
        ]
    },
    {
        "id": "dbc1240ca5e203fc",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_fire_alarm",
        "operation": "find",
        "x": 330,
        "y": 520,
        "wires": [
            [
                "387366f90b337d6e"
            ]
        ]
    },
    {
        "id": "e1cdcd03ec511418",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 520,
        "wires": [
            [
                "dbc1240ca5e203fc"
            ]
        ]
    },
    {
        "id": "387366f90b337d6e",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 145",
        "func": "var floor = \"floor0\"\nvar room = \"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 520,
        "wires": [
            [
                "c48dcfbfc3147518"
            ]
        ]
    },
    {
        "id": "ba7be708c89c6709",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 580,
        "wires": [
            [
                "b92f2332f601252b"
            ]
        ]
    },
    {
        "id": "b92f2332f601252b",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_sprinkler",
        "operation": "find",
        "x": 320,
        "y": 580,
        "wires": [
            [
                "7b61dbc2bb94963a"
            ]
        ]
    },
    {
        "id": "7b61dbc2bb94963a",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 146",
        "func": "var floor = \"floor0\"\nvar room = \"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 580,
        "wires": [
            [
                "da67d16f778784b5"
            ]
        ]
    },
    {
        "id": "1284bc93167cc4be",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 460,
        "wires": [
            [
                "0cf24f8726756edb"
            ]
        ]
    },
    {
        "id": "e04428e627270592",
        "type": "inject",
        "z": "d85ab886bb3338cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 80,
        "y": 640,
        "wires": [
            [
                "8010a7a89a5223c1"
            ]
        ]
    },
    {
        "id": "8010a7a89a5223c1",
        "type": "mongodb in",
        "z": "d85ab886bb3338cf",
        "mongodb": "de13983547e18743",
        "name": "",
        "collection": "326_hvac_sensor_temp",
        "operation": "find",
        "x": 350,
        "y": 640,
        "wires": [
            [
                "74346e59179f4656"
            ]
        ]
    },
    {
        "id": "74346e59179f4656",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 147",
        "func": "var floor = \"floor0\"\nvar room = \"room1\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"x\": time, \"y\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = [{\n    \"series\": [\"Smoke sensor reading\"],\n    \"data\": [data],\n    \"labels\": [\"\"]\n}]\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 640,
        "wires": [
            [
                "a3b83949bab1a9e7"
            ]
        ]
    },
    {
        "id": "a3b83949bab1a9e7",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "ccafe30d692f0847",
        "order": 1,
        "width": 5,
        "height": 5,
        "label": "Pressure sensor data",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c48dcfbfc3147518",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "ccafe30d692f0847",
        "order": 3,
        "width": 5,
        "height": 5,
        "label": "Fire Alarm History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "da67d16f778784b5",
        "type": "ui_chart",
        "z": "d85ab886bb3338cf",
        "name": "",
        "group": "ccafe30d692f0847",
        "order": 4,
        "width": 5,
        "height": 5,
        "label": "Sprinkler History",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "8cd3a6188845591b",
        "type": "ui_table",
        "z": "d85ab886bb3338cf",
        "group": "2701b1ecd02534d5",
        "name": "Sensor Data ",
        "order": 11,
        "width": 5,
        "height": 3,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 790,
        "y": 160,
        "wires": []
    },
    {
        "id": "fe94df925cca471b",
        "type": "function",
        "z": "d85ab886bb3338cf",
        "name": "function 148",
        "func": "var floor = \"floor0\"\nvar room = \"room0\"\nvar topic = msg.payload[0].topic\n\nvar temp = topic.split(\"/\")\n\nasync function sendSingleObj(payload) {\n    var data = []\n    for (let i = 0; i < payload.length; i++) {\n        var topicList = payload[0].topic.split(\"/\")\n        var floorTemp = topicList[3]\n        var roomTemp = topicList[4]\n        if (floor == floorTemp && room == roomTemp) {\n            let dataTemp = payload[i].payload.data\n            let time = payload[i].payload.time\n            data.push({ \"Time\": new Date(time), \"Reading\": dataTemp })\n        }\n    }\n    return data;\n}\nvar data = await sendSingleObj(msg.payload)\nmsg.payload = data\nreturn msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "8cd3a6188845591b",
                "01e41220a7f30065"
            ]
        ]
    },
    {
        "id": "01e41220a7f30065",
        "type": "debug",
        "z": "d85ab886bb3338cf",
        "name": "web interface",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "8ac0fb65110f12fd",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 5,
        "width": 4,
        "height": 1
    },
    {
        "id": "95809a75d6684dc1",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 6,
        "width": 4,
        "height": 1
    },
    {
        "id": "faefb9d67a52ad71",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "c1aca949f9b16592",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 8,
        "width": 4,
        "height": 1
    },
    {
        "id": "645bddcd9bc4ae49",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 9,
        "width": 4,
        "height": 1
    },
    {
        "id": "dafda1a67451c518",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 10,
        "width": 5,
        "height": 1
    },
    {
        "id": "735bde9ffc6b4429",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 12,
        "width": 14,
        "height": 1
    },
    {
        "id": "535f9345f914b704",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 13,
        "width": 5,
        "height": 1
    },
    {
        "id": "e7b87a6a4253101e",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 14,
        "width": 14,
        "height": 1
    },
    {
        "id": "0c735d9fde7912b4",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 15,
        "width": 5,
        "height": 1
    },
    {
        "id": "2a3467f63bc6c88a",
        "type": "ui_spacer",
        "z": "d85ab886bb3338cf",
        "name": "spacer",
        "group": "2701b1ecd02534d5",
        "order": 16,
        "width": 14,
        "height": 1
    },
    {
        "id": "de13983547e18743",
        "type": "mongodb",
        "hostname": "mongo_326",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "co326",
        "name": ""
    },
    {
        "id": "2701b1ecd02534d5",
        "type": "ui_group",
        "name": "Room 01",
        "tab": "00072b2f38cb6708",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": true,
        "className": ""
    },
    {
        "id": "ccafe30d692f0847",
        "type": "ui_group",
        "name": "Room 02",
        "tab": "00072b2f38cb6708",
        "order": 4,
        "disp": true,
        "width": "20",
        "collapse": true,
        "className": ""
    },
    {
        "id": "00072b2f38cb6708",
        "type": "ui_tab",
        "name": "Web Interface",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]